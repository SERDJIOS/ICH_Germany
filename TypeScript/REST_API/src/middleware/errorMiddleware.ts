import { Request, Response, NextFunction } from 'express';
import { AppError } from '../errors';

/**
 * Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ 404 –æ—à–∏–±–æ–∫, –∫–æ–≥–¥–∞ –º–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
 */
export const notFoundHandler = (req: Request, res: Response, next: NextFunction): void => {
  const error = new AppError(`–ú–∞—Ä—à—Ä—É—Ç ${req.originalUrl} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ`, 404);
  next(error);
};

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ MongoDB –¥–ª—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (–∫–æ–¥ 11000)
 */
const handleDuplicateFieldsDB = (err: any): AppError => {
  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
  let value = '–¥—É–±–ª–∏—Ä—É—é—â–µ–µ—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ';
  try {
    const match = err.message.match(/{([^}]*)}/);
    if (match && match[1]) {
      value = match[1];
    }
  } catch (error) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å
  }
  
  const message = `–î—É–±–ª–∏—Ä—É—é—â–µ–µ—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è: ${value}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.`;
  return new AppError(message, 400);
};

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ MongoDB
 */
const handleValidationErrorDB = (err: any): AppError => {
  let errors: string[] = ['–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏'];
  
  try {
    if (err.errors && typeof err.errors === 'object') {
      errors = Object.values(err.errors).map((el: any) => el.message || '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏');
    }
  } catch (error) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å
  }
  
  const message = `–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${errors.join('. ')}`;
  return new AppError(message, 400);
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (—Å –¥–µ—Ç–∞–ª—è–º–∏)
 */
const sendErrorDev = (err: AppError, res: Response): void => {
  res.status(err.statusCode).json({
    status: err.status,
    error: err,
    message: err.message,
    stack: err.stack
  });
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω (–±–µ–∑ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –¥–µ—Ç–∞–ª–µ–π)
 */
const sendErrorProd = (err: AppError, res: Response): void => {
  // –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ, –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É
  if (err.isOperational) {
    res.status(err.statusCode).json({
      status: err.status,
      message: err.message
    });
  } else {
    // –ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–µ –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏: –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å –¥–µ—Ç–∞–ª–∏
    console.error('ERROR üí•', err);
    res.status(500).json({
      status: 'error',
      message: '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'
    });
  }
};

/**
 * –ì–ª–∞–≤–Ω—ã–π middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫
 */
export const errorHandler = (err: any, req: Request, res: Response, next: NextFunction): void => {
  err.statusCode = err.statusCode || 500;
  err.status = err.status || 'error';

  // –†–∞–∑–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (process.env.NODE_ENV === 'development') {
    sendErrorDev(err, res);
  } else {
    let error = { ...err };
    error.message = err.message;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ MongoDB
    if (err.code === 11000) error = handleDuplicateFieldsDB(error);
    if (err.name === 'ValidationError') error = handleValidationErrorDB(error);

    sendErrorProd(error, res);
  }
}; 